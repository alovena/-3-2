#include <stdio.h>
//팩토리얼 반복, 재귀
int fact(int n);
int fact2(int n);
//이분검색 반복, 재귀
void search(int* array, int start, int end, int ans);
int search2(int* array, int start, int end, int ans);
//피보나치 반복, 재귀
int fibo(int n);
int fibo2(int n);
int main() {
	int choose;
	//프로그램을 종료할 때 까지 반복 시킨다.
	while (1) {
		printf("팩토리얼(1), 이분검색(2), 피보나치(3) 중에 하나를 고르시오.(종료는 0) : ");
		//scnaf를 사용해도 되지만 _s가 더 안정성이 있다.
		scanf_s("%d", &choose);
		//0을 선택하면 무한 반복이 끝난다.
		if (choose == 0) {
			printf("\n프로그램을 종료하겠습니다.\n");
			break;
		}
		switch (choose) {
		case 1:
			printf("팩토리얼 함수 로딩...\n=========================\n");
			//팩토리얼 함수 종료 전가지 반복 시킨다.
			while (1) {
				printf("반복함수(1), 재귀함수(2) 중에 하나를 고르시오.(종료는 0) : ");
				scanf_s("%d", &choose);
				if (choose == 1) {
					printf("반복함수 로딩...\n*************************\n");
					//변수 선언
					int a;
					printf("반복을 이용한 팩토리알 : ");
					scanf_s("%d", &a);
					//반복을 이용한 팩토리알
					printf("\n반복 함수의 값은 : %d\n*************************\n", fact(a));
				}
				else if (choose == 2) {
					printf("재귀함수 로딩...\n*************************\n");
					//변수 선언
					int a;
					printf("반복을 이용한 팩토리알 : ");
					scanf_s("%d", &a);
					//재귀를 이용한 팩토리알
					printf("\n재귀 함수의 값은 : %d\n*************************\n", fact2(a));
				}
				else if (choose == 0) {
					printf("\n팩토리얼 함수를 종료 합니다.\n=========================\n");
					break;
				}
				else {
					printf("\n없는 번호 입니다. 다시 설정해 주세요.\n\n");
				}
			}
			break;
		case 2:
			printf("이분검색 함수 로딩...\n=========================\n");
			while (1) {
				printf("반복함수(1), 재귀함수(2) 중에 하나를 고르시오.(종료는 0) : ");
				scanf_s("%d", &choose);
				if (choose == 1) {
					printf("반복함수 로딩...\n*************************\n");
					//미리 배열을 구현합니다. 짝수도 상관은 없지만 이왕이면 홀수로 해서 가운데를 먹게 해주세요.
					int array[] = { 1,3,4,6,8,10,11 };
					//sizeof는 크기를 나타내 줍니다. int형의 array배열을 int의 크기만큼 나눠야 배열의 크기를 알 수 있습니다.
					//ex)array 배열의 메모리가 차지하는 크기 = 5000, int의 크기 = 100 이라면
					//5000/100 = 50으로 array배열의 크기는 50 즉, array[50]인 셈입니다.
					int size = sizeof(array) / sizeof(int);
					//찾고자 하는 키값입니다. 저는 answer의 준말로 ans을 사용했습니다.
					int ans = 0;
					//배열의 시작점을 선언 합니다. 컴퓨터는 0부터 숫자를 새기 때문에 0으로 초기화 해줍니다.
					//배열의 끝점은 배열의 크기 이므로 size가 끝점 입니다.
					int start = 0;
					//어떤 배열을 검색하는지 보여줍니다.
					for (int i = 0; i < size; i++) {
						printf("%3d", array[i]);
					}
					printf("\n");
					printf("찾고자 하는 숫자를 입력하시오 : ");
					scanf_s("%d", &ans);
					//반복 함수
					//search는 void 함수로 반환하지 않기 때문에 바로 사용해 줍니다.
					search(array, start, size - 1, ans);
				}
				else if (choose == 2) {
					printf("재귀함수 로딩...\n*************************\n");
					int array[] = { 1,3,4,6,8,10,11 };
					int size = sizeof(array) / sizeof(int);
					int ans = 0;
					int start = 0;
					for (int i = 0; i < size; i++) {
						printf("%3d", array[i]);
					}
					printf("\n");
					printf("찾고자 하는 숫자를 입력하시오 : ");
					scanf_s("%d", &ans);
					//재귀 함수
					//search2는 int 함수로 값을 반환해 줍니다.
					int result = search2(array, start, size - 1, ans);
					if (result == NULL) printf("\n없는 숫자 입니다.\n*************************\n");
					else printf("찾는 값의 순서는 %d 입니다.\n*************************\n", result);
				}
				else if (choose == 0) {
					printf("\n이분검색 함수를 종료 합니다.\n=========================\n");
					break;
				}
				else {
					printf("\n없는 번호 입니다. 다시 설정해 주세요.\n\n");
				}
			}
			break;
		case 3:
			printf("피보나치 함수 로딩...\n=========================\n");
			while (1) {
				printf("반복함수(1), 재귀함수(2) 중에 하나를 고르시오.(종료는 0) : ");
				scanf_s("%d", &choose);
				if (choose == 1) {
					printf("반복함수 로딩...\n*************************\n");
					//반복함수
					int n;
					printf("원하는 피보나치 수열의 번호 : ");
					scanf_s("%d", &n);
					printf("값은 : %d 입니다.\n*************************\n", fibo(n));
				}
				else if (choose == 2) {
					printf("재귀함수 로딩...\n*************************\n");
					//재귀함수
					int n;
					printf("원하는 피보나치 수열의 번호 : ");
					scanf_s("%d", &n);
					printf("값은 : %d 입니다.\n*************************\n", fibo2(n));
				}
				else if (choose == 0) {
					printf("\n피보나치 함수를 종료 합니다.\n=========================\n");
					break;
				}
				else {
					printf("\n없는 번호 입니다. 다시 설정해 주세요.\n\n");
				}
			}
			break;
		default:
			printf("없는 번호 입니다. 다시 설정해 주세요.\n\n");
			continue;
		}
	}
	return 0;
}
//각각 반복, 재귀 순서입니다.
//팩토리얼 함수
//팩토리얼은 어떤한 숫자를 하나씩 줄여가면서 1까지 곱을 하는 수학기법입니다.
//ex)5! = 5*4*3*2*1
int fact(int n) {
	int result = 1;
	//반복으로 result 변수에 1,2,3,4...n까지 곱하는 방법 입니다.
	for (int i = 1; i <= n; i++) {
		result = result*i;
	}
	//result값을 반환 합니다.
	return result;
}
int fact2(int n) {
	//n이 1이 될때 1값을 반환합니다.
	//쉽게 말해서 재귀를 할 때 언제 종료를 하는 것을 설정 한 것입니다.
	if (n <= 1) return 1;
	else {
		//5!=5*4! 이므로 점화식으로 표현하자면 n! = n*(n-1)! 입니다.
		return n*fact2(n - 1);
	}
}
//이분검색 함수
//이분검색은 한 배열에서 원하고자 하는 값을 검색하는 방식 중
//전체 값을 이분화 하여 경우의 수를 줄여가는 방식입니다.
//만약 [1,2,3,4,5,6,7]이라는 배열이 있다면 7개중 가운데인 4를 기준으로
//4가 찾는 값이면 종료, 아니라면 크기를 비교해 왼쪽과 오른쪽으로 다시 배열을 나고 다시 탐색합니다.
//ex)[1,2,3,4,5,6,7] 찾는 값은 3 가운데 값은 4
//가운데 값이 아니므로 3<4 이므로 왼쪽 배열을 검색합니다.
//[1,2,3]중 찾는 값은 3 가운데 값은 2
//가운데 값이 아니므로 2<3 이므로 오른쪽 배열을 검색합니다.
//[3] 찾는 값은 3 가운데 값은 4
//찾는 값이므로 최종적으로 3을 반환합니다.
void search(int* array, int start, int end, int ans) {
	//가운데 값을 선언해줍니다.
	int mid;
	//배열의 크기를 선언해줍니다. 끝점의 초기값은 배열의 크기이므로 변수에 넣습니다.
	int size = end;
	while (1) {
		//가운데 값의 순서를 설정해 줍니다.
		//mid는 몇번째 순서 인지를, array[mid]는 가운데 값을 나타내 줍니다.
		mid = ((start + end) / 2);
		printf("\nmid는 %d, mid의 값은 %d\n", mid + 1, array[mid]);
		//검색을 할 때 시작점이 배열의 크기보다 크거나
		//끝점이 0보다 작거나
		//시작점이 끝점을 넘어 갈 때 숫자는 없으므로 종료해 줍니다.
		if (start >= size || end < 0 || start>end) {
			printf("\n없는 숫자 입니다.\n*************************\n");
			break;
		}
		//가운데 값과 찾는 값이 같으면 화면에 출력합니다.
		if (array[mid] == ans) {
			printf("찾는 값의 순서는 %d 입니다.\n*************************\n", mid + 1);
			break;
		}
		else if (array[mid] > ans) {
			printf("찾는 값이 왼쪽에 있습니다.\n");
			//끝점을 가운데 값 왼쪽으로 설정 합니다.
			end = mid - 1;
		}
		else if (array[mid] < ans) {
			printf("찾는 값이 오른쪽에 있습니다.\n");
			//시작점을 가운데 값 오른쪽으로 설정 합니다.
			start = mid + 1;
		}
	}
}
int search2(int* array, int start, int end, int ans) {
	int mid = ((start + end) / 2);
	int size = end;
	printf("\nmid는 %d, mid의 값은 %d\n", mid + 1, array[mid]);
	//찾는 값이 없으면 화면에 출력해 줍니다.
	if (start >= size || end < 0 || start>end) {
		return 0;
	}
	if (array[mid] == ans) {
		//가운데 값과 찾고자 하는 값이 맞기 때문에 찾은 값을 반환해 줍니다.
		return array[mid];
	}
	else if (array[mid] > ans) {
		printf("찾는 값이 왼쪽에 있습니다.\n");
		//끝점을 가운데 값 왼쪽으로 설정 한 후 함수를 다시 불러옵니다(재귀).
		search2(array, start, mid - 1, ans);
	}
	else if (array[mid] < ans) {
		printf("찾는 값이 오른쪽에 있습니다.\n");
		//시작점을 가운데 값 오른쪽으로 설정 한 후 함수를 다시 불러옵니다(재귀).
		search2(array, mid + 1, end, ans);
	}
	else {
		//호오옥시 모를 에러를 알려줍니다. 만약에 이게 보이면 알려주세요.
		printf("\n에러입니다.\n\n");
		return 0;
	}
}

//피보나치 함수
//피보나치 수열의 값을 구하는 식입니다.
//피보나치의 수학적 식은
//함수 f(x)에 대해서 x=0일 때 f(0)=0, x=1일 떄 f(1)=1일 때
//f(n)=f(n-1)+f(n-2)이를 만족하는 수열입니다..(단, n>=2)
int fibo(int n) {
	//0번째 값은 0이므로 0값을 반환합니다.
	if (n == 0) return 0;
	//1번째 값은 1미으로 1값을 반환합니다.
	else if (n == 1) return 1;
	//나머지 수열들을 계산합니다.
	else {
		//0,1번째 값을 선언해줍니다.
		int n0, n1;
		n0 = 0;
		n1 = 1;
		//값을 계산할 변수를 선언합니다.
		int sum = 0;
		//값을 저장할 변수를 선언합니다.
		//쉽게 보기 위해서 변수명을 점화식과 비슷하게 했습니다.
		int fn, fn_1, fn_2;
		//초기 값을 지정해 줍니다.
		fn_1 = n0;
		fn_2 = n1;
		for (int i = 2; i <= n; i++) {
			//계산을 다한 후 값을 비워줍니다.
			sum = 0;
			//구하고자 하는 값은 그 전값과 전전값의 합입니다.
			fn = fn_1 + fn_2;
			//구한 값을 sum에 저장합니다.
			sum = fn;
			//전값에 전전값을 넣습니다.(앞으로 한칸씩 땡겨준다고 보면 되요)
			fn_1 = fn_2;
			//전전값에 전값을 넣습니다.
			fn_2 = fn;
		}
		//최종적으로 구한값을 반환해줍니다.
		return sum;
	}
}
int fibo2(int n) {
	if (n == 0) return 0;
	if (n == 1) return 1;
	//구하고자 하는 값은 자신의 전 값과 전전 값이므로 아래와 같은 값을 반환한다.
	//진짜 반복과는 비교도 안될정도로 효율적인 코드네요 ㄷㄷ;;
	return fibo2(n - 1) + fibo2(n - 2);
}